<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Overworld.Script</name>
    </assembly>
    <members>
        <member name="T:Overworld.Script.Ows">
            <summary>
            Overworld Script
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command">
            <summary>
            An executable Ows command
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.COUNTDOWN">
            <summary>
            An Reversed for loop that starts at the provided number and stops at 0
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.COUNTDOWN_WITH">
            <summary>
            Like Countdown, but it decrements the provided variable by reference instead of making a new index.
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.COUNT_UP">
            <summary>
            An Loop that starts at 0, and invokes the command given with every number from 0- the provided stop point.
            The stop point is not inclusive.
            You can use the keyword LOOP-INDEX to substitute the current loop value in a Command that is called directly by the loop.
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.COUNT_UP_WITH">
            <summary>
            Like Countdown, but it decrements the provided variable by reference instead of making a new index.
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.ELSE">
            <summary>
            Placeholder for ELSE logic in If-Else
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.END">
            <summary>
            Ends the program.
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.END_AND_RETURN">
            <summary>
            Ends the program and returns a value to the compiler
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.FOR">
            <summary>
            A For Loop
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.FOR_EACH">
            <summary>
            A loop that executes on each item in a object collection.
            You can substitute in 'LOOP-OBJECT' for any of the params of the command that will be called for it to execute on the current loop object.
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.GOTO">
            <summary>
            Go To a Line of Code (alias)
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.GO_BACK">
            <summary>
            Go back to  the last line from go-to
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.GO_TO">
            <summary>
            Go To a Line of Code
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.IF">
            <summary>
            An IF conditional that can run a command
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.IF_NOT">
            <summary>
            A reversed IF conditional that can run a command if the condition is "not true"/false
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.RETURN">
            <summary>
            returns a value to the kube that this came from.
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.SET">
            <summary>
            Sets a value to a given key for the executing character
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.SET.#ctor(Overworld.Script.Ows.Command.Type.Identity,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            For internal extension
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.SET.SetLocalVariableForCharacter(Overworld.Script.Ows.Command.Context,System.String,Overworld.Script.Ows.String,Overworld.Script.Ows.IParameter)">
            <summary>
            Helper function to get the variables for a character safely
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.SET.SetGlobalVariableForCharacter(Overworld.Script.Ows.Command.Context,System.String,Overworld.Script.Ows.String,Overworld.Script.Ows.IParameter)">
            <summary>
            Helper function to get the variables for a character safely
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.SET_FOR">
            <summary>
            Sets a value to a given key for the executing character
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.SET_FOR.#ctor(Overworld.Script.Ows.Command.Type.Identity,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            For internal extension
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.SET_FOR_PROGRAM">
            <summary>
            Sets a value to a given key for the current program
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.SET_FOR_WORLD">
            <summary>
            Sets a value to a given key for the whole world
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.SET_HERE">
            <summary>
            Sets a value passed via the do:with scope
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.SET_LOCALLY">
            <summary>
            Sets a value to a given key for the executing character
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.SET_LOCALLY_FOR">
            <summary>
            Sets a value to a given key for the executing character
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.UNTIL">
            <summary>    
            A reversed while conditional that can loop a command
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.UN_SET">
            <summary>
            Un-sets any value for a given key for the local character
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.UN_SET.#ctor(Overworld.Script.Ows.Command.Type.Identity,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            For internal extension
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.UN_SET_FOR">
            <summary>
            Un-sets any value for a given key for the given character collection
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.UN_SET_FOR_PROGRAM">
            <summary>
            Un-sets any value for a given key for the given global program level variable 
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.UN_SET_FOR_WORLD">
            <summary>
            Un-sets any value for a given key for the given global world level variable 
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.UN_SET_LOCALLY">
            <summary>
            Un-sets any value for a given key for the local character
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.UN_SET_LOCALLY_FOR">
            <summary>
            Un-sets any value for a given key for the given character collection
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.WHILE">
            <summary>
            An while conditional that can loop a command
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.Type">
            <summary>
            A type of command in Ows
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Command.Type.ParameterTypes">
            <summary>
            The types of params that this command requires
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Command.Type.Execute">
            <summary>
            Execute logic for this command.
            Parameters: 
              The Command context,
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Command.Type.ExpectedReturnTypes">
            Optional:
            A type of token this command is expected to return
            If it can return null, place null last.
        </member>
        <member name="P:Overworld.Script.Ows.Command.Type.Description">
            <summary>
            A description of this command
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Command.Type.Examples">
            <summary>
            Examples of command usage
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.Type.Identity">
            <summary>
            A command Id
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Type.#ctor(Overworld.Script.Ows.Command.Type.Identity,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Make a new command
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Type.Make``1(Overworld.Script.Ows.Program,System.Collections.Generic.IEnumerable{Overworld.Script.Ows.IParameter})">
            <summary>
            Make a command of the given type
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Type.Make``1(Overworld.Script.Ows.Program,Overworld.Script.Ows.IParameter[])">
            <summary>
            Make a command of the given type
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Type.Make(Overworld.Script.Ows.Program,System.Collections.Generic.IEnumerable{Overworld.Script.Ows.IParameter})">
            <summary>
            Make a command of the given type
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Type.Make(Overworld.Script.Ows.Program,Overworld.Script.Ows.IParameter[])">
            <summary>
            Make a command of the given type
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.Context">
            <summary>
            Context used for executing a command
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Command.Context.DebugData">
            <summary>
            Debug data passed along with the context.
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.Command.Context.DebugData.BeforeLine">
            <summary>
            Executes before each command line
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.Command.Context.DebugData.AfterLine">
            <summary>
            Executes after each command line
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.Command.Context.DebugData.BeforeCommandExecution">
            <summary>
            Executes before each command line
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Command.Context.Command">
            <summary>
            The executed command
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.Command.Context.Executor">
            <summary>
            The character who executed the command
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Command.Context.AttachedTo">
            <summary>
            The entity this script is attached to.
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Command.Context.OrderedParameters">
            <summary>
            The ordered parameters passed to this command
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetParameter(System.Int32)">
            <summary>
            Gets an item passed in to the current command as an ordered parameter by index
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetUltimateParameterVariable(System.Int32)">
            <summary>
            Gets an the ultimage variable value of a parameter passed in to the current command as an ordered parameter by index
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetFirstVariable(System.String,System.String)">
            <summary>
            Best method for getting variables by name.
            Gets the first variable that matches the name and charachter.
            First hits them scoped,
            then charachter specific
            then global
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.TryToGetFirstVariable(System.String,System.String)">
            <summary>
            Best method for getting variables by name.
            Gets the first variable that matches the name and charachter.
            First hits them scoped,
            then charachter specific
            then global
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetGlobalVariable(System.String)">
            <summary>
            Gets the first program or world level variable with the given name
            (not character specific)
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.TryToGetGlobalVariable(System.String)">
            <summary>
            Gets the first program or world level variable with the given name
            (not character specific)
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.TryToGetCharacterSpecificVariable(System.String,System.String)">
            <summary>
            Gets the first character specific program or world level variable with the given name
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetTempScopedVariable(System.String)">
            <summary>
            Gets the first temp scoped variable with the given name
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.TryToGetTempScopedVariable(System.String)">
            <summary>
            Gets the first temp scoped variable with the given name
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetGlobalProgramVariable(System.String)">
            <summary>
            Gets the first program level variable with the given name
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetGlobalWorldVariable(System.String)">
            <summary>
            Gets the first world level variable with the given name
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetCharacterSpecificVariableFor(System.String,System.String)">
            <summary>
            Gets the first charachter specific program or world level variable with the given name
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetWorldLevelCharacterSpecificVariableFor(System.String,System.String)">
            <summary>
            Gets the first charachter specific world level variable with the given name
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetParameter``1(System.Int32)">
            <summary>
            Gets an item passed in to the current command as an ordered parameter by index
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetUltimateParameterVariable``1(System.Int32)">
            <summary>
            Gets an the ultimage variable value of a parameter passed in to the current command as an ordered parameter by index
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetFirstVariable``1(System.String,System.String)">
            <summary>
            Best method for getting variables by name.
            Gets the first variable that matches the name and charachter.
            First hits them scoped,
            then charachter specific
            then global
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.TryToGetFirstVariable``1(System.String,System.String)">
            <summary>
            Best method for getting variables by name.
            Gets the first variable that matches the name and charachter.
            First hits them scoped,
            then charachter specific
            then global
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.GetGlobalVariable``1(System.String)">
            <summary>
            Gets the first program or world level variable with the given name
            (not character specific)
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.TryToGetGlobalVariable``1(System.String)">
            <summary>
            Gets the first program or world level variable with the given name
            (not character specific)
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.Context.TryToGetCharacterSpecificVariable``1(System.String,System.String)">
            <summary>
            Gets the first character specific program or world level variable with the given name
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Command.Types">
            <summary>
            All registered command types
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Command.Archetype">
            <summary>
            The type of archetype
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Command.Parameters">
            <summary>
            The parameters provided to this command
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Command.Value">
            <summary>
            The default value, providing null as the character.
            Use ExecuteFor if you need a character passed in.
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.#ctor(Meep.Tech.Data.IBuilder{Overworld.Script.Ows.Command})">
            <summary>
            Make a command with the given params
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.ExecuteFor(Overworld.Data.Character)">
            <summary>
            Execute this command for the given character
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command.ExecuteUltimateCommandFor(Overworld.Script.Ows.Command.Context)">
            <summary>
            Executes this and all commands that it returns until the return is no longer a command
            This leaves the last command unexecuted.
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command._executeWithExtraParams(Overworld.Data.Character,System.Collections.Generic.IList{Overworld.Script.Ows.IParameter},Overworld.Script.Ows.VariableMap,Overworld.Script.Ows.Index,Overworld.Script.Ows.Command.Context.DebugData)">
            <summary>
            Execute this command for the given character
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command._executeWith(Overworld.Script.Ows.Command.Context)">
            <summary>
            Execute this command for the given character
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Command._execute(Overworld.Script.Ows.Command.Context)">
            <summary>
            Execution internal logic
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.CollectionConcatinator.Type">
            <summary>
            Base archetype for conditions
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.CollectionConcatinator.Type.Make(Overworld.Script.Ows.Program,System.Collections.Generic.IEnumerable{Overworld.Script.Ows.IParameter},System.Boolean)">
            <summary>
            Make function to make a new condition
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.CollectionConcatinator.IsAdditive">
            <summary>
            IF this adds or removes from the "left" collection
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.UnknownOperator">
            <summary>
            A math opperator or comparitor we can't parse yet b/c we don't know the varaible type
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.UnknownOperator.Type">
            <summary>
            Base archetype for conditions
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.UnknownOperator.Type.Make(Overworld.Script.Ows.Program,System.Collections.Generic.IEnumerable{Overworld.Script.Ows.IParameter},System.String)">
            <summary>
            Make function to make a new condition
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.UnknownOperator.Type._compile(Overworld.Script.Ows.Command.Context,Overworld.Script.Ows.IParameter,Overworld.Script.Ows.IParameter,System.String)">
            <summary>
            Compile the command based on it's variables:
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.UnknownOperator.Operator">
            <summary>
            The comparitor for this command.
            How it will compare it's value/values
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.UnknownOperator.#ctor(Meep.Tech.Data.IBuilder{Overworld.Script.Ows.Command})">
            <summary>
            Make a new conditional statement
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Condition">
            <summary>
            A conditional statement/command (true or false)
            Takes in 1 or 2[default:null] items and uses the comparitor to return a boolean result
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Condition.Type">
            <summary>
            Base archetype for conditions
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Condition.Type.Make(Overworld.Script.Ows.Program,System.Collections.Generic.IEnumerable{Overworld.Script.Ows.IParameter},System.Nullable{Overworld.Script.Ows.Comparitors})">
            <summary>
            Make function to make a new condition
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Condition.Comparitor">
            <summary>
            The comparitor for this command.
            How it will compare it's value/values
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Condition.Value">
            <summary>
            The boolean value direved from the conditional
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Condition.#ctor(Meep.Tech.Data.IBuilder{Overworld.Script.Ows.Command})">
            <summary>
            Make a new conditional statement
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Condition._executeWith(Overworld.Script.Ows.Command.Context)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Condition.ComputeFor(Overworld.Data.Character)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.MathOpperator">
            <summary>
            A math opperator
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.MathOpperator.Type">
            <summary>
            Base archetype for conditions
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.MathOpperator.Type.Make(Overworld.Script.Ows.Program,System.Collections.Generic.IEnumerable{Overworld.Script.Ows.IParameter},System.Nullable{Overworld.Script.Ows.Opperators})">
            <summary>
            Make function to make a new condition
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.MathOpperator.Opperator">
            <summary>
            The comparitor for this command.
            How it will compare it's value/values
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.MathOpperator.Value">
            <summary>
            The final value direved from the math
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.MathOpperator.#ctor(Meep.Tech.Data.IBuilder{Overworld.Script.Ows.Command})">
            <summary>
            Make a new conditional statement
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.StringConcatinator.Type">
            <summary>
            Base archetype for conditions
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.StringConcatinator.Type.Make(Overworld.Script.Ows.Program,System.Collections.Generic.IEnumerable{Overworld.Script.Ows.IParameter},System.Nullable{Overworld.Script.Ows.Opperators})">
            <summary>
            Make function to make a new condition
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Comparitors">
            <summary>
            Used to compare values
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.ComparitorPhrases">
            <summary>
            Comparitor phrases used for finding comparitors in code
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.ComparitorSymbols">
            <summary>
            Symbols used to find comparitors in code
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Opperators">
            <summary>
            Used to opperate on values
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.TimesOpperatorExtraSymbol">
            <summary>
            An extra symbol used to check for times opperations.
            This is not reserved as a variable name, it shouldn't need to be for how it's used.
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.NumberOpperatorSymbols">
            <summary>
            Symbols used for number maths in code
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.NumberOpperatorPhrases">
            <summary>
            Words used for number maths in code
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.DefaultCommands">
            <summary>
            Built In Ows commands
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.StartLabel">
            <summary>
            Reserved label for specifying the start of a program
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.ElsePhrase">
            <summary>
            Phrase used for Else syntax with if
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.CollectAllSymbol">
            <summary>
            Used to indicate "All" in some cases
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.CollectAllPhrase">
            <summary>
            Used to indicate "All" in some cases
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.ProgramPhrase">
            <summary>
            Used to indicate the whole program
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.WorldSymbol">
            <summary>
            Used to indicate the whole world
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.ProgramSymbol">
            <summary>
            Used to indicate the whole program
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.WorldPhrase">
            <summary>
            Used to indicate the whole world
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.ConcatPhrase">
            <summary>
            An extra phrase that can be used with concatination
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.AndConcatPhrase">
            <summary>
            An extra phrase that can be used with concatination
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.CollectionExclusionPhrase">
            <summary>
            An extra phrase that can be used for the opposite of concatination
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.SetToPhrase">
            <summary>
            Phrase used to set items to variables
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.SetsAsPhrase">
            <summary>
            Phrase used to set items to variables
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.SetIsPhrase">
            <summary>
            Phrase used to set items to variables
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.FunctionSeperatorSymbol">
            <summary>
            Symbol that seperates a function name and it's parameters
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.CollectionStartSymbol">
            <summary>
            The initial Symbol indicating the beginning of a collection
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.CollectionEndSymbol">
            <summary>
            Symbol that indicates the end of a collection
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.LabelStartSymbol">
            <summary>
            The initial Symbol indicating a label is beginning this line
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.LabelEndSymbol">
            <summary>
            Symbol that indicates the end of a label
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.LogicStartSymbol">
            <summary>
            Symbol that indicates the start of a opperator or condition section
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.LogicEndSymbol">
            <summary>
            Symbol that indicates the end of a opperator or condition section
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.DecimalSymbol">
            <summary>
            Used for decimals in numbers
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.SubVariableSymbol">
            <summary>
            Used for sub variables in objects
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.StringQuotesSymbol">
            <summary>
            Symbol that is used to represent a string
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.SetToSymbol">
            <summary>
            Phrase used to set items to variables
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.LineEndAlternateSymbol">
            <summary>
            Forces a line to end. Try not to abuse this it can make debugging harder
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.CollectionItemSeperatorSymbols">
            <summary>
            Symbol that indicates the end of a collection
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.ReservedKeywords">
            <summary>
            Keywords you can't use for other reasons.
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.ReservedSymbols">
            <summary>
            Keywords you can't use for other reasons.
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows._globals">
            <summary>
            True global variables
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows._globalVariablesByCharacter">
            <summary>
            The variables unique to each character, by variable name
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Interpreter">
            <summary>
            A factory for building programs from a provided context and lines of text.
            NOT-THREAD-SAFE
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Interpreter.Program">
            <summary>
            The the program that was/is being built
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter.JoinOwsFiles(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Join together several .ows files.
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter.JoinOwsFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Join together several .ows files into a program
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter.JoinOwsFiles(System.ValueTuple{System.String,System.String}[])">
            <summary>
            Join together several .ows files.
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter.Build(Overworld.Script.Ows.Program.ContextData,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Build a new program from a bunch of files and return it's interpreter 
            </summary>
            <param name="context">The context for the interpreter to use when building a Program</param>
            <param name="unorderedRawFiles">File contents and file names for the files you want compiled into one program. Files will be sorted alphabeticaly.
              Lines of code in files with names that begin with '_' will be set as "pre initial lines" and will be placed before the default entry point of the program</param>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter.#ctor(Overworld.Script.Ows.Program.ContextData)">
            <summary>
            Make a new program interpreter. They built programs~
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter.Build(System.String,System.String)">
            <summary>
            Build a new program from a bunch of files
            </summary>
            <param name="rawLines">The raw lines of program text, starting from the initial entry point</param>
            <param name="preInitialLines">Lines that are placed before the default start point of the compiled program. These are useful for adding dependencies and such to a Program that you don't want run by default.</param>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter.BuildLine(System.String)">
            <summary>
            Build a new program from a single line of text
            </summary>
            <param name="rawLine">The single line of text to build from</param>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter.BuildLine(System.String,System.String@)">
            <summary>
            Build a new program from a single line of text
            </summary>
            <param name="rawLine">The single line of text to build from</param>
            <param name="label">The label of the line if there is one</param>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter.Build(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Build a new program from a bunch of files
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter._cleanProgram">
            <summary>
            Clean the program
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Overworld.Script.Ows.Interpreter._parseCommand(System.String@,System.Int32)" -->
        <member name="M:Overworld.Script.Ows.Interpreter._parseParam(System.String@,System.Type,System.Int32)">
            <summary>
            Create a token as a param for a command
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter._parseAnyTrailingCollectionConcatinators(System.String@,System.Type,System.Int32,Overworld.Script.Ows.IParameter)">
            <summary>
            Parse any trailing concatinators after a collection and add them to the main collection object.
            This does nothing if there are no concatinators.
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter._makeExistingVariable(System.String)">
            <summary>
            Make or find a symbol represeing an existing variable
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter._parseString(System.String@)">
            <summary>
            Parse the next bit of the remaining line as a string
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Interpreter._getCollectionItemTokenForType(System.String,System.Type)">
            <summary>
            Gets a collection token for an object, based on a string
            </summary>
            <param name="tokenText"></param>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="T:Overworld.Script.Ows.Program">
            <summary>
            An executable ows program
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Program.ContextData">
            <summary>
            Context for an Ows program
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Program.ContextData.Commands">
            <summary>
            The commands within this context
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Program.ContextData.Characters">
            <summary>
            The characters in the world of thdis script
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Overworld.Script.Ows.Program.ContextData.Entities" -->
        <member name="M:Overworld.Script.Ows.Program.ContextData.#ctor(System.Collections.Generic.Dictionary{System.String,Overworld.Script.Ows.Command.Type},System.Collections.Generic.Dictionary{System.String,Overworld.Data.Entity},System.Collections.Generic.Dictionary{System.String,Overworld.Data.Character})">
            <summary>
            Create a context for a new program
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Program.Context">
            <summary>
            The context of this program relating to the world and controller that executed it
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.Program._globals">
            <summary>
            The variables universal to all parts of this program
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.Program._variablesByCharacter">
            <summary>
            The variables unique to each character, by variable name
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.Program._localVariableNames">
            <summary>
            The names of local variables
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Program.StartLine">
            <summary>
            The line the program starts at
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Program.PreStartRawText">
            <summary>
            The raw text of the program before it's initial/start point
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Program.PostStartRawText">
            <summary>
            The raw text of the program after it's initial/start point
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Program.RawText">
            <summary>
            The raw text of the entire program
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Program.LineCount">
            <summary>
            Total line count
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.Program._labelsWithLineNumber">
            <summary>
            Label name keys and what line they relate to
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.Program._labelsByLineNumber">
            <summary>
            Label name keys and what line they relate to
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.Program._commands">
            <summary>
            The commands by line
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.#ctor(Overworld.Script.Ows.Program.ContextData)">
            <summary>
            Make and compile a new Ows program from a collection of lines
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.ExecuteAs(Overworld.Data.Character,System.String)">
            <summary>
            Execute this program as a specific character
            TODO: Runs should be wrapped in an object.
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.ExecuteFrom(Overworld.Data.Entity,Overworld.Data.Character,System.Collections.Generic.Dictionary{System.String,Overworld.Script.Ows.IParameter},System.String)">
            <summary>
            Execute this program as a specific character
            TODO: Runs should be wrapped in an object.
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.ExecuteWith(Overworld.Data.Character,Overworld.Script.Ows.VariableMap,System.String)">
            <summary>
            Execute this program as a specific character
            TODO: Runs should be wrapped in an object.
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.DebugAs(Overworld.Data.Character,Overworld.Script.Ows.Command.Context.DebugData,System.String)">
            <summary>
            Execute this program as a specific character
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.GetLineNumberForLabel(System.String,Overworld.Script.Ows.Command.Context)">
            <summary>
            Try to get the line number from some label text
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.TryToGetLineNumberForLabel(System.String,Overworld.Script.Ows.Command.Context)">
            <summary>
            Try to get the line number from some label text
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.TryToGetVariableByName(System.String,Overworld.Script.Ows.Variable@)">
            <summary>
            Try to get a world or program level variable by name for this program
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.TryToGetVariableByName(System.String)">
            <summary>
            Try to get a world or program level variable by name for this program
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.GetVariableByName(System.String)">
            <summary>
            Try to get a world or program level variable by name for this program
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.GetVariableByName(Overworld.Data.Character,System.String)">
            <summary>
            Try to get a world or program level variable by name for this program
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.GetVariableByName(System.String,System.String)">
            <summary>
            Try to get a world or program level variable by name for this program
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.TryToGetVariableByName(Overworld.Data.Character,System.String,Overworld.Script.Ows.Variable@)">
            <summary>
            Try to get a character level varaible by name from the world or program 
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.TryToGetVariableByName(System.String,System.String,Overworld.Script.Ows.Variable@)">
            <summary>
            Try to get a character level varaible by name from the world or program 
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.GetCharacter(System.String)">
            <summary>
            Get a matching character by id or unique name
            TODO: these should be turned into modular object fetcher/builder plugins
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program.GetEntity(System.String)">
            <summary>
            Get a matching entity by id or  name
            TODO: these should be turned into modular object fetcher/builder plugins
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program._executeAllStartingAtLine(System.Int32,Overworld.Data.Character,System.Nullable{System.Int32},Overworld.Script.Ows.VariableMap,Overworld.Script.Ows.Command.Context.DebugData)">
            <summary>
            Execute the whole program, starting at the given line
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program._getAllObjectsOfType(System.Type)">
            <summary>
            Get all the variables of a given object type
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program._setVariableForCharacters(System.Collections.Generic.IEnumerable{System.String},System.String,System.Object,Overworld.Script.Ows.Variable.Scopes)">
            <summary>
            Set the variable for the given characters
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program._setGlobalVariable(Overworld.Script.Ows.Variable.Scopes,System.String,System.Object)">
            <summary>
            Set a global(not character specific) variable in a scope
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program._setGlobalProgramVariable(System.String,System.Object)">
            <summary>
            Add a variable to the global "program" context
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program._setGlobalWorldVariable(System.String,System.Object)">
            <summary>
            add a variable to the global "world" context
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Program._onSetNammedVariable(System.String,System.Boolean,System.Boolean)">
            <summary>
            logic executed on adding a variable to the runtime.
            </summary>
        </member>
        <member name="F:Overworld.Script.Ows.AttachedToEntityVariableName">
            <summary>
            The name for the variable that represents what object the given script is attached to. 
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.IConditional">
            <summary>
            Represents a parameter that can be equated to true or false
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.IConditional.ComputeFor(Overworld.Data.Character)">
            <summary>
            Compute the boolean value for this conditional
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.IParameter">
            <summary>
            These values can be parameters for Ows Program Commands
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.IParameter.GetUltimateValueFor(Overworld.Script.Ows.Command.Context)">
            <summary>
            Get the ultimate value from a parameter
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.IParameter.GetUltimateVariableFor(Overworld.Script.Ows.Command.Context)">
            <summary>
            Get the ultimate variable from a parameter
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.IParameter.GetUltimateVariableAs``1(Overworld.Script.Ows.Command.Context)">
            <summary>
            Get the ultimate variable from a parameter
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.IToken">
            <summary>
            The base part of the OWs language
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.IToken.Program">
            <summary>
            The program this command is for
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.IToken.Name">
            <summary>
            The token's name identifier
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.IToken.Value">
            <summary>
            The final computed value of this token
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Token">
            <summary>
            The base part of the OWs language
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Token.Program">
            <summary>
            The program this command is for
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Token.Name">
            <summary>
            The token's name identifier
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Token.Value">
            <summary>
            The final computed value of this token
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Token.#ctor(Overworld.Script.Ows.Program,System.String)">
            <summary>
            Base to make a new token
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.ScopedVariable">
            <summary>
            A container around variables that  need a character or scoped context to fetch their true value
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.DoWithStartResult">
            <summary>
            Signifies a value that was signaled as a return by the RETURN command
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.EndResult">
            <summary>
            Signifies a kill/end value
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.GoToResult">
            <summary>
            Signifies a return from the GOTO command to the original code
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Index">
            <summary>
            Represents an index for a For loop
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.PlaceholderIndex">
            <summary>
            Represents a placeholder for an index for a For loop
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.ReturnAllResult">
            <summary>
            Signifies a value that was signaled as a return by the RETURN command
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.ReturnResult">
            <summary>
            Signifies a value that was given back from a return.
            Just gets sent back to the caller
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.VariableMap">
            <summary>
            A collection of named variables.
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Boolean">
            <summary>
            A boolean in Ows
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Boolean.Value">
            <summary>
            The boolean value
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Boolean.Not">
            <summary>
            Get a reverse of this boolean
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Boolean.#ctor(Overworld.Script.Ows.Program,System.Boolean,System.String)">
            <summary>
            Make a new boolean variable
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Boolean.And(Overworld.Script.Ows.Boolean)">
            <summary>
            And this and another boolean
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Boolean.Or(Overworld.Script.Ows.Boolean)">
            <summary>
            Or this and another boolean
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Boolean.ComputeFor(Overworld.Data.Character)">
            <summary>
            Just returns itself.
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Collection">
            <summary>
            A collection of values.
            </summary>
        </member>
        <member name="P:Overworld.Script.Ows.Collection.RestrictedToType">
            <summary>
            If this collection is restricted to a type:
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Collection.Overworld#Script#Ows#IParameter#GetUltimateVariableFor(Overworld.Script.Ows.Command.Context)">
            <summary>
            Gets the compiled collection for the executor
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Collection`1">
            <summary>
            Used to show what type of collection a command wants.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Overworld.Script.Ows.INumeric">
            <summary>
            Ultimately returns a number
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.ITextual">
            <summary>
            Ultimately returns a peice of text/string
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Overworld.Script.Ows.String" -->
        <member name="P:Overworld.Script.Ows.String.Value">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.String.#ctor(Overworld.Script.Ows.Program,System.String,System.String)">
            <summary>
            Make a new string variable
            </summary>
        </member>
        <member name="T:Overworld.Script.Ows.Variable.Scopes">
            <summary>
            Available variable scopes
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Variable.#ctor(Overworld.Script.Ows.Program,System.Object,System.String)">
            <summary>
            Used to make a new variable
            </summary>
        </member>
        <member name="M:Overworld.Script.Ows.Variable.Make(Overworld.Script.Ows.Program,System.String,System.Object)">
            <summary>
            Make a new named variable of the right basic type
            </summary>
        </member>
        <member name="M:Overworld.Script.StringExtensions.Until(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
            <summary>
            Get a string until a characher appears
            </summary>
        </member>
        <member name="M:Overworld.Script.StringExtensions.StartsWith(System.String,System.Collections.Generic.IEnumerable{System.String},System.String@)">
            <summary>
            Get a string until a characher appears
            </summary>
        </member>
        <member name="M:Overworld.Script.StringExtensions.ToUpperExeptStringLiterals(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts all lines to upercase, except in string literals on the same line
            </summary>
        </member>
        <member name="M:Overworld.Script.StringExtensions.UntilAny(System.Collections.Generic.IEnumerable{System.Char},System.Char[])">
            <summary>
            Get a string until a characher appears
            </summary>
        </member>
        <member name="M:Overworld.Script.StringExtensions.UntilClosure(System.String,System.Char,System.Char)">
            <summary>
            Get a full closure from begining to end, with subcolsurs included
            </summary>
        </member>
        <member name="M:Overworld.Script.StringExtensions.UntilAny(System.Collections.Generic.IEnumerable{System.Char},System.Collections.Generic.IEnumerable{System.String},System.String@)">
            <summary>
            Get a string until a characher appears
            </summary>
        </member>
        <member name="M:Overworld.Script.StringExtensions.UntilNot(System.Collections.Generic.IEnumerable{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            Get a string until a characher appears
            </summary>
        </member>
        <member name="M:Overworld.Script.StringExtensions.Until(System.Collections.Generic.IEnumerable{System.Char},System.Char,System.String@)">
            <summary>
            Get a string until a characher appears
            </summary>
        </member>
        <member name="M:Overworld.Script.StringExtensions.After(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
            <summary>
            Get a string until a characher appears
            </summary>
        </member>
        <member name="M:Overworld.Script.ContextExtensions.AddExtraParameter(Overworld.Script.Ows.Command.Context,Overworld.Script.Ows.IParameter)">
            <summary>
            Add an extra parameter to the context
            </summary>
        </member>
    </members>
</doc>
