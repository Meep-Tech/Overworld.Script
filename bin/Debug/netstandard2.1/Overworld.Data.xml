<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Overworld.Data</name>
    </assembly>
    <members>
        <member name="T:Overworld.Data.Animation">
            <summary>
            A sprite animation.
            </summary>
        </member>
        <member name="T:Overworld.Data.Animation.Type">
            <summary>
            Types of entity animation.
            These can be built by files
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.AllowInitializationsAfterLoaderFinalization">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Name">
            <summary>
            The animation's unique name
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Version">
            <summary>
            The version of this animation.
            If this is different then the name of the compiled *.anim file then it will be recompiles.
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Namespace">
            <summary>
            The animation's namespace
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Clip">
            <summary>
            The unity animation clip that is played
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Tags">
            <summary>
            The tags that apply to this sprite animation
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.Dimensions">
            <summary>
            The dimensions of the sprite animation in px
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.IsBuildFromAnAssembly">
            <summary>
            If this animation type was built by an assembly/class rather than though the auto-loader
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.ResourceKey">
            <summary>
            The key for this resource
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.PackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.Type.DefaultPackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="M:Overworld.Data.Animation.Type.#ctor(Meep.Tech.Data.Archetype{Overworld.Data.Animation,Overworld.Data.Animation.Type}.Identity)">
            <summary>
            XBAM Base Constructors
            </summary>
        </member>
        <member name="M:Overworld.Data.Animation.Type.#ctor(System.String,Newtonsoft.Json.Linq.JObject,UnityEngine.AnimationClip,System.Collections.Generic.IEnumerable{Overworld.Data.Animation.Tag})">
            <summary>
            Import constructor
            </summary>
        </member>
        <member name="T:Overworld.Data.Animation.Tag">
            <summary>
            Tags used to find any aimations
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.Icon">
            <summary>
            Used for the entity's icon.
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.North">
            <summary>
            Indicates North Facing Sprite Animation
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.South">
            <summary>
            Indicates South Facing Sprite Animation
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.East">
            <summary>
            Indicates Eastward Facing Sprite Animation
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.West">
            <summary>
            Indicates Westward Facing Sprite Animation
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.Animated">
            <summary>
            Represents a sprite that is animated
            </summary>
        </member>
        <member name="F:Overworld.Data.Animation.Tag.Still">
            <summary>
            Represents a single framed sprite or A non-moving one
            </summary>
        </member>
        <member name="T:Overworld.Data.Animation.Tags">
            <summary>
            A collection of tags that can apply to an animation
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.CustomTags">
            <summary>
            Custom Entity-Setable tags for this animation. 
            This allows you to customize the tags of an animation on an entity.
            </summary>
        </member>
        <member name="P:Overworld.Data.Animation.CustomTagWeights">
            <summary>
            Custom Entity-Setable weights for each tag applied to this animation.
            This allows you to customize the weight of different tags in animations for different entities.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity">
            <summary>
            An in game thing that can move around.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation">
            <summary>
            A sprite animation.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation.Type">
            <summary>
            Types of entity animation.
            These can be built by files
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Animation.Type.Layer">
            <summary>
            The layer this animation acts on.
            Defults to 0 (BaseBody)
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Animation.Type.ShouldScaleToFitEntityByDefault">
            <summary>
            The default "scale to fit entity" setting of animations of this type
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Animation.Type.#ctor(Overworld.Data.Entity.Animation.Type.Identity)">
            <summary>
            XBAM Base Constructors
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Animation.Type.#ctor(System.String,Newtonsoft.Json.Linq.JObject,UnityEngine.AnimationClip,System.Collections.Generic.IEnumerable{Overworld.Data.Entity.Animation.Tag})">
            <summary>
            Import constructor
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Animation.Type.ConfigureModel(Meep.Tech.Data.IBuilder{Overworld.Data.Animation},Overworld.Data.Animation)">
            <summary>
            Build a model from this animation type
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation.Type.Identity">
            <summary>
            Animation type id
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation.Tag">
            <summary>
            Tags used to find entity specific animations
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation.Tag.JsonConverter">
            <summary>
            Used to convert tags to strings and back by default
            </summary>
        </member>
        <member name="F:Overworld.Data.Entity.Animation.Tag.Move">
            <summary>
            Represents a sprite action used to move a number of tiles from your current position.
            For animation that stay in the same place but have motion, use the "Animated" tag.
            </summary>
        </member>
        <member name="F:Overworld.Data.Entity.Animation.Tag.Walk">
            <summary>
            Represents walking
            </summary>
        </member>
        <member name="F:Overworld.Data.Entity.Animation.Tag.Run">
            <summary>
            Represents running
            </summary>
        </member>
        <member name="F:Overworld.Data.Entity.Animation.Tag.Jump">
            <summary>
            Represents jumping
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Animation.Layer">
            <summary>
            The layer of the entity an animation applies to
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Animation.ScaleToFitEntity">
            <summary>
            If this animation should scale to fit the entity it's applied to
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Component`1">
            <summary>
            A component that can be added to an entity.
            </summary>
            <typeparam name="TEntityComponentBaseType">Only one component of each base type can be added to a model.</typeparam>
        </member>
        <member name="M:Overworld.Data.Entity.Component`1.#cctor">
            <summary>
             on init, set the builder factory for each subtype:
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Component`1.Type">
            <summary>
            There can only be one component per type attached to an entity.
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Component`1.Type.DisplayName">
            <summary>
            The display name of this component.
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Component`1.Type.BuildEditorUx">
            <summary>
            The display name of this component.
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Component`1.Type.BuildDefaultUxField(System.Reflection.FieldInfo,Overworld.Data.Entites.Components.ShowInOverworldEditorAttribute)">
            <summary>
            Build a default Ux field for an entity component using the field
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Component`1.Type.BuildDefaulUxtField(System.Reflection.PropertyInfo,Overworld.Data.Entites.Components.ShowInOverworldEditorAttribute)">
            <summary>
            Build a default Ux field for an entity component using the property
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Component`1.Type.GetEmptyEditorUx">
            <summary>
            Get the base editor UX for this type of component.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Overworld.Data.Entity.Component`1.IsEnabled">
            <summary>
            If this component is enabled.
            Also used to enable and disable.
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Component`1.#ctor">
            <summary>
            For making a new type of component.
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Component`1.OnDisabled">
            <summary>
            Callback for on-deacivated/disabled
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Component`1.OnEnabled">
            <summary>
            Callback for on-acivated/enabled
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Component`1.UpdateFromUxFieldChange(Overworld.Ux.Simple.UxView,System.String)">
            <summary>
            Update from a ux.
            </summary>
            <param name="ux">The ux for this component</param>
            <param name="updatedFieldKey">(optional) a field that was changed.</param>
        </member>
        <member name="T:Overworld.Data.Entity.Type">
            <summary>
            A type of entity
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Type.ResourceKey">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Type.PackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Type.DefaultPackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.Type.#ctor(System.String,Overworld.Data.Entity.Type.Identity)">
            <summary>
            Used to make a new type of entity
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Type.Identity">
            <summary>
            Ids for entity types
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Component">
            <summary>
            A component that can be added to an entity.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entity.Component.IType">
            <summary>
            There can only be one component per type attached to an entity.
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Id">
            <summary>
            Unique entity id
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Name">
            <summary>
            The display name of an entity
            </summary>
        </member>
        <member name="P:Overworld.Data.Entity.Animations">
            <summary>
            Availible sprite animations by tag
            </summary>
        </member>
        <member name="M:Overworld.Data.Entity.#ctor(Meep.Tech.Data.IBuilder{Overworld.Data.Entity})">
            <summary>
            X Bam Builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Overworld.Data.Entity.#ctor(System.String,System.String)">
            <summary>
            Make a new entity
            </summary>
        </member>
        <member name="T:Overworld.Data.Character">
            <summary>
            A player controlled entity
            </summary>
        </member>
        <member name="M:Overworld.Data.Character.Type.#ctor(System.String,Overworld.Data.Entity.Type.Identity)">
            <summary>
            For X Bam
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Overworld.Data.Character.UniqueName">
            <summary>
            The unique, human readable name of a character. Like their username
            </summary>
        </member>
        <member name="M:Overworld.Data.Character.#ctor(Meep.Tech.Data.IBuilder{Overworld.Data.Entity})">
            <summary>
            X Bam Builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Overworld.Data.Character.#ctor(System.String,System.String)">
            <summary>
            Make a new character
            </summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.DoEveryFrameHook">
            <summary>
            A Hook to execute something every frame
            </summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.EntityHook`1">
            <summary>
            A type of component that uses a hook to execute some code from the perspective of an entity.
            </summary>
        </member>
        <member name="P:Overworld.Data.Entites.Components.EntityHook`1.Executeables">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.EntityInteractionHook">
            <summary>
            A component to place an execution hook on an entity interaction.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.EntityKeyPressHook">
            <summary>
            This type of hook is exexuted on a key press.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.EntityOnCharacterJoinHook">
            <summary>
            A hook that's executed for the joining charachter when they join the world.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.EntityOnStartHook">
            <summary>
            A hook executred on the world being started by the server.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.IEntityHookComponent">
            <summary>
            A component that can be added to an entity that executes code on a trigger.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.IgnoreInOverworldEditorAttribute">
            <summary>
            Hide a field  with a public get and any setter from the Overworld Editor
            </summary>
        </member>
        <member name="T:Overworld.Data.Entites.Components.ShowInOverworldEditorAttribute">
            <summary>
            Can be used to show a private/protected component field in the overworld editor
            </summary>
        </member>
        <member name="M:Overworld.Data.Entites.Components.ShowInOverworldEditorAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Used to mark a private field in a component as "should be shown" in the editor.
            </summary>
        </member>
        <member name="T:Overworld.Data.Tile">
            <summary>
            Represents a tile placed on a tileboard.
            </summary>
        </member>
        <member name="T:Overworld.Data.Tile.Type">
            <summary>
            Archetypes for tiles.
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.AllowInitializationsAfterLoaderFinalization">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.DefaultPackageName">
            <summary>
            The default package name for archetyps of this type
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.ResourceKey">
            <summary>
            The unique resource key of this type
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.BackgroundImageHashKey">
            <summary>
            The hash key of the image
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.PackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.DefaultBackground">
            <summary>
            The background tile this tile is using
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.DefaultHeight">
            <summary>
            The tile height
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.Description">
            <summary>
            The tile height
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.UseDefaultBackgroundAsInWorldTileImage">
            <summary>
            If the default background should be used as the tile image in world.
            If false, the DefaultBackground image is just for use in the editor ui.
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Type.LinkArchetypeToTileDataOnSet">
            <summary>
            If this tile archetype should link itself to a tile when used to make that tile in the world
            If you don't want this archetype set as the tile's 'type' then set this to false.
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.Type.#ctor(System.String,System.String,System.String,UnityEngine.Tilemaps.Tile,System.Nullable{UnityEngine.Hash128},System.Nullable{System.Single})">
            <summary>
            Used to make new tiles via import.
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Archetype">
            <summary>
            The archetype originally used to make this tile.
            A tile can be modified around it, and then reset to it as well.
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Background">
            <summary>
            The background tile this tile is using
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Height">
            <summary>
            The tile height
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile._backgroundOverride">
            <summary>
            can be used to reference a type who's background should be used instead.
            This is to avoid duplicating tiles.
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.ResetAndUpdateForCurrentArchetype">
            <summary>
            Resets this tile to it's current archetype's settings, and updates any changed settings.
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.OverrideBackgroundTo(Overworld.Data.Tile.Type)">
            <summary>
            Override the background to another type's background image
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile._applyArchetype(Overworld.Data.Tile.Type)">
            <summary>
            Initialize this for a new archetype
            </summary>
            <param name="archetype"></param>
        </member>
        <member name="T:Overworld.Data.Tile.Porter">
            <summary>
            Used to import and export tile types.
            </summary>
        </member>
        <member name="T:Overworld.Data.Tile.Porter.BackgroundImageImportMode">
            <summary>
            The config specified import mode
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.PixelsPerTileOption">
            <summary>
            option for pixels per tile.
            Takes an int.
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.ProvidedSheetDimensionsOption">
            <summary>
            option for dimensions in tiles instead of pixels during import.
            Takes an int.
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.InPlaceTileCallbackOption">
            <summary>
            Takes an Action[Vector2Int, UnityEngine.Tilemaps.Tile] with the params:
              tile location in it's tilemap
              the generated unity tile
            </summary>
        </member>
        <member name="F:Overworld.Data.Tile.Porter.NameConfigKey">
            <summary>
            Key for the name value in the config
            </summary>
        </member>
        <member name="P:Overworld.Data.Tile.Porter.DefaultPackageName">
            <summary>
            The package name that this came from.
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.Porter.#ctor(Overworld.Data.User)">
            <summary>
            Make a new tile importer. This is made at startup.
            TODO: these should be singletons probably.
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.Porter._importArchetypesFromExternalFile(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Imports the archetyps, assuming the one file is an image or config.json
            
            </summary>
            <param name="options">
            - PixelsPerTileOption: the pixel diameter of imported tiles.
            - (optional) InPlaceTileCallbackOption: Action[Vector2Int&#44; Tile.Type] executed on the imported tile, given it's location in it's image.
            </param>
            <returns></returns>
        </member>
        <member name="M:Overworld.Data.Tile.Porter._importArchetypesFromExternalFiles(System.String[],System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Imports the archetyps, assuming at least one of the tiles is an image and one may be an config.json
            </summary>
            <param name="options">
            - PixelsPerTileOption: the pixel diameter of imported tiles.
            - (optional) ProvidedSheetDimensionsOption: if the image is a sprite sheet, you can provide a custom number of tiles to pull from it
            - (optional) InPlaceTileCallbackOption: Action[Vector2Int&#44; Tile.Type] executed on the imported tile, given it's location in it's image.
            </param>
            <returns></returns>
        </member>
        <member name="M:Overworld.Data.Tile.Porter._serializeArchetypeToModFiles(Overworld.Data.Tile.Type,System.String)">
            <summary>
            Saves each tile as it's own image with a config for import
            </summary>
        </member>
        <member name="M:Overworld.Data.Tile.Porter._importUnityTilesFrom(System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{UnityEngine.Vector2})">
            <summary>
            Import a collection of tiles from an image location
            </summary>
        </member>
        <member name="T:Overworld.Data.TileExtensions">
            <summary>
            Extensions for Unity Tiles
            </summary>
        </member>
        <member name="M:Overworld.Data.TileExtensions.GetTileHash(UnityEngine.Tilemaps.Tile)">
            <summary>
            Gets a tile's hash code from it's image
            </summary>
        </member>
        <member name="T:Overworld.Data.DateAndTime">
            <summary>
            A date and time in the game world.
            </summary>
        </member>
        <member name="F:Overworld.Data.DateAndTime.Date">
            <summary>
            The numerical date in the game world.
            </summary>
        </member>
        <member name="F:Overworld.Data.DateAndTime.Time">
            <summary>
            The numeric time in the game world.
            </summary>
        </member>
        <member name="M:Overworld.Data.DateAndTime.#ctor(System.Int32,System.Single)">
            <summary>
            Make a date with an optional time
            </summary>
        </member>
        <member name="P:Overworld.Data.DateAndTime.Local">
            <summary>
            The local date and time of the current world
            </summary>
        </member>
        <member name="T:Overworld.Data.Executeable">
            <summary>
            An item that can be added to a component signifying logic that can be executed.
            Currently just OWS scripts.
            </summary>
        </member>
        <member name="T:Overworld.Data.Executeable.Type">
            <summary>
            A type of executable, setable in the editor.
            </summary>
        </member>
        <member name="T:Overworld.Data.Executeable.Type.Identity">
            <summary>
            An Id for an executable type
            </summary>
        </member>
        <member name="M:Overworld.Data.Executeable.Type.Identity.#ctor(System.String,System.String)">
            <summary>
            Make a new Executable Type Id
            </summary>
        </member>
        <member name="M:Overworld.Data.Executeable.Type.#ctor(Meep.Tech.Data.Archetype.Identity)">
            <summary>
            For making new types of executables.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Overworld.Data.CardinalDirectionExtensions.TurnClockwise(Overworld.Data.World.CardinalDirection)">
            <summary>
            Get the direction if you turn clockwise 90 degrees from this one.
            </summary>
        </member>
        <member name="M:Overworld.Data.CardinalDirectionExtensions.TurnCounterClockwise(Overworld.Data.World.CardinalDirection)">
            <summary>
            Get the direction if you turn counter-clockwise 90 degrees from this one.
            </summary>
        </member>
        <member name="M:Overworld.Data.CardinalDirectionExtensions.TurnClockwise(Overworld.Data.World.CardinalCorner)">
            <summary>
            Get the direction if you turn clockwise 90 degrees from this one.
            </summary>
        </member>
        <member name="M:Overworld.Data.CardinalDirectionExtensions.TurnCounterClockwise(Overworld.Data.World.CardinalCorner)">
            <summary>
            Get the direction if you turn counter-clockwise 90 degrees from this one.
            </summary>
        </member>
        <member name="T:Overworld.Data.Entities.Components.BasicPhysicalStats">
            <summary>
            Some basic physical stats for all characters
            </summary>
        </member>
        <member name="P:Overworld.Data.Entities.Components.BasicPhysicalStats.Height">
            <summary>
            Height, in "Tiles" (1.75 is average)
            </summary>
        </member>
        <member name="P:Overworld.Data.Entities.Components.BasicPhysicalStats.Width">
            <summary>
            Width, in "Tiles" (0.75 is average)
            </summary>
        </member>
        <member name="P:Overworld.Data.Entities.Components.BasicPhysicalStats.Weight">
            <summary>
            Weight in "Units", used for physics and some other things.
            175u is average.
            </summary>
        </member>
        <member name="M:Overworld.Data.Entities.Components.BasicPhysicalStats.AddHeightChangeFunc(System.String,System.Func{System.Single,System.Single,System.Single})">
            <summary>
            Add an Func to be executed when the height is changed.
            </summary>
            <param name="key">The key of the Func, so it can be removed potentially</param>
            <param name="onHeightChange">The Func to execute.
            Params:
            old height,
            new height.
            Returns:
            extra height to add.
            </param>
        </member>
        <member name="M:Overworld.Data.Entities.Components.BasicPhysicalStats.AddWeightChangeFunc(System.String,System.Func{System.Single,System.Single,System.Single})">
            <summary>
            Add an Func to be executed when the weight is changed.
            </summary>
            <param name="key">The key of the Func, so it can be removed potentially</param>
            <param name="onWeightChange">The Func to execute.
            Params:
            old weight,
            new weight.
            Returns:
            extra weight to add.
            </param>
        </member>
        <member name="M:Overworld.Data.Entities.Components.BasicPhysicalStats.AddWidthChangeFunc(System.String,System.Func{System.Single,System.Single,System.Single})">
            <summary>
            Add an Func to be executed when the width is changed.
            </summary>
            <param name="key">The key of the Func, so it can be removed potentially</param>
            <param name="onWidthChange">The Func to execute.
            Params:
            old width,
            new width.
            Returns:
            extra width to add.
            </param>
        </member>
        <member name="M:Overworld.Data.Entities.Components.BasicPhysicalStats.RemoveWidthChangeFunc(System.String,System.Func{System.Single,System.Single,System.Single}@)">
            <summary>
            Remove a width change Func
            </summary>
        </member>
        <member name="M:Overworld.Data.Entities.Components.BasicPhysicalStats.RemoveHeightChangeFunc(System.String,System.Func{System.Single,System.Single,System.Single}@)">
            <summary>
            Remove a height change Func
            </summary>
        </member>
        <member name="M:Overworld.Data.Entities.Components.BasicPhysicalStats.RemoveWeightChangeFunc(System.String,System.Func{System.Single,System.Single,System.Single}@)">
            <summary>
            Remove a weight change Func
            </summary>
        </member>
        <member name="T:Overworld.Data.TileBoard">
            <summary>
            A collection of tiles for a board.
            </summary>
        </member>
        <member name="F:Overworld.Data.TileBoard.PitDepth">
            <summary>
            The height/depth for tiles that are just bottomless pits/nothing/etc.
            </summary>
        </member>
        <member name="P:Overworld.Data.TileBoard.Dimensions">
            <summary>
            The dimensions of the board, in tiles.
            </summary>
        </member>
        <member name="P:Overworld.Data.TileBoard.Bounds">
            <summary>
            The tile board boundaries
            </summary>
        </member>
        <member name="P:Overworld.Data.TileBoard.RequiredTileTypes">
            <summary>
            Required tile archetypes needed to load this board.
            </summary>
        </member>
        <member name="F:Overworld.Data.TileBoard._tiles">
            <summary>
            The raw tile data for this board
            </summary>
        </member>
        <member name="P:Overworld.Data.TileBoard.Item(UnityEngine.Vector2Int)">
            <summary>
            Get a tile via world location from above
            </summary>
        </member>
        <member name="P:Overworld.Data.TileBoard.Item(System.Int32,System.Int32)">
            <summary>
            Get a tile via world location from above
            </summary>
        </member>
        <member name="M:Overworld.Data.TileBoard.#ctor(UnityEngine.Vector2Int)">
            <summary>
            Create a new tileboard of the given size.
            </summary>
        </member>
        <member name="P:Overworld.Data.User.UniqueName">
            <summary>
            The unique, human readable name of a User. The username
            </summary>
        </member>
        <member name="T:Overworld.Data.World">
            <summary>
            A Game world, consisting of multuiple tile boards
            </summary>
        </member>
        <member name="T:Overworld.Data.World.CardinalDirection">
            <summary>
            The 4 cardinal directions.
            </summary>
        </member>
        <member name="T:Overworld.Data.World.CardinalCorner">
            <summary>
            The 4 cardinal corner directions.
            </summary>
        </member>
        <member name="F:Overworld.Data.World.Origin">
            <summary>
            The world origin of tileboards in (XZ) space
            </summary>
        </member>
        <member name="F:Overworld.Data.World.CardinalOffsets">
            <summary>
            The 4 cardinal directions offsets
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Options">
            <summary>
            The owner-set options for this world.
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Entities">
            <summary>
            All of the entities in the current world by id
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Boards">
            <summary>
            The editor specific data.
            This should be lazy loaded when the editor is opened for a world.
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Bounds">
            <summary>
            The world boundaries
            </summary>
        </member>
        <member name="T:Overworld.Data.World.Settings">
            <summary>
            creator/owner specified settings for a world
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Settings.TileWidthInPixels">
            <summary>
            The witdth of a tile in pixesls in this world
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Settings.AllowDragging">
            <summary>
            Allow players to drag the screen in this world.
            Always enabled in editor mode.
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Settings.Dimensions">
            <summary>
            The dimensions of the world, in tiles.
            </summary>
        </member>
        <member name="P:Overworld.Data.World.Settings.ZoomLimit">
            <summary>
            The zoom in and out limits for the in-game camera.
            </summary>
        </member>
        <member name="T:Overworld.Data.IO.ArchetypePorter`1">
            <summary>
            used to im/export archetypes of a specific type from mods
            </summary>
        </member>
        <member name="P:Overworld.Data.IO.ArchetypePorter`1.DefaultPackageName">
            <summary>
            The default package name for archetyps of this type
            </summary>
        </member>
        <member name="F:Overworld.Data.IO.ArchetypePorter`1._cachedResources">
            <summary>
            The cached archetypes of this kind, by resource id
            </summary>
        </member>
        <member name="F:Overworld.Data.IO.ArchetypePorter`1._cachedResourcesByPackage">
            <summary>
            The cached archetypes of this kind, by package name then resource id.
            </summary>
        </member>
        <member name="P:Overworld.Data.IO.ArchetypePorter`1.CurrentUser">
            <summary>
            The user in control of the current game, and imports.
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.#ctor(Overworld.Data.User)">
            <summary>
            Make a new type of archetype porter with inheritance
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1._importArchetypesFromExternalFile(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Used to import arhetypes of this kind from one uploaded file
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1._importArchetypesFromExternalFiles(System.String[],System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Used to import arhetypes of this kind from multiple uploaded files
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1._serializeArchetypeToModFiles(`0,System.String)">
            <summary>
            Serialize this archetype to a set of files in the mod folder.
            </summary>
            <param name="archetype">The archetype to serialize into a file or files</param>
            <param name="packageDirectoryPath">The root path to save files to for this archetype</param>
            <returns>The newly serialized file's locations</returns>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.SerializeArchetypeToModFolder(`0)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.TryToGetGetCachedArchetype(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="resourceKey"></param>
            <returns></returns>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.GetCachedArchetype(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="resourceKey"></param>
            <returns></returns>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.TryToFindArchetypeAndLoadFromModFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.LoadArchetypeFromModFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.ImportAndBuildNewArchetypeFromFile(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.ImportAndBuildNewArchetypeFromFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.ImportAndBuildNewArchetypeFromFiles(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.GetFolderForArchetype(Overworld.Data.IPortableArchetype)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.GetFolderForModItem(System.String,System.String@,System.String@)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.GetFolderForModItem(System.String,System.String)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.TryToMoveRenamedArchetypeFolder(System.String,Overworld.Data.IPortableArchetype)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1.ForceMoveRenamedArchetypeFolder(System.String,Overworld.Data.IPortableArchetype)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Data.IO.ArchetypePorter`1._getNewResourceKeyFromFileNameAndSettings(System.String,System.String,System.String@)">
            <summary>
            Used to make a new key for a new resouce made by the current user
            </summary>
        </member>
        <member name="T:Overworld.Data.IArchetypePorter">
            <summary>
            used to im/export archetypes from mods
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.ModFolderName">
            <summary>
            The base mod folder name
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.ImportFolderName">
            <summary>
            The imports folder name
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.FinishedImportsFolderName">
            <summary>
            The finished imports folder name.
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.NameOverrideSetting">
            <summary>
            Option parameter to override the object name
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.MoveFinishedFilesToFinishedImportsFolderSetting">
            <summary>
            Option parameter to Move the imported files to the finished imports folder.
            Accepts a bool
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.NoPackageName">
            <summary>
            Option parameter to indicate there's no package name
            Accepts a bool
            </summary>
        </member>
        <member name="F:Overworld.Data.IArchetypePorter.ConfigFileName">
            <summary>
            The name of the config json file.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.GetCachedArchetype(System.String)">
            <summary>
            Get an already loaded archetype
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.TryToGetGetCachedArchetype(System.String)">
            <summary>
            Try to get an already loaded archetype
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.LoadArchetypeFromModFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            get an archetype from the mods folder files
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.TryToFindArchetypeAndLoadFromModFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Try to get an existing archetype from the compiled mod folder files.
            This doesn't throw if it finds no files, but may throw if the found files are invalid, or the archetype already exists.
            Returns null on failure to find.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.ImportAndBuildNewArchetypeFromFile(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Import a new archetype or archetypes from the external file location.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.ImportAndBuildNewArchetypeFromFiles(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Import a new archetype or archetypes from the external collection of files.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.ImportAndBuildNewArchetypeFromFolder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Import a new archetype from the external folder, full of files.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.GetFolderForModItem(System.String,System.String@,System.String@)">
            <summary>
            Get the sub folder under the mod folder on the device used for this specfic archetype,
            also splits up the key into it's parts
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.GetFolderForModItem(System.String,System.String)">
            <summary>
            Get the sub folder unther the mod folder on the device used for this specfic archetype
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.GetFolderForArchetype(Overworld.Data.IPortableArchetype)">
            <summary>
            Get the sub folder under the mod folder on the device used for this specfic archetype
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.SerializeArchetypeToModFolder(Meep.Tech.Data.Archetype)">
            <summary>
            Serialize this archetype to a set of files in the mod folder.
            </summary>
            <param name="archetype">The archetype to serialize into a file or files</param>
            <returns>The newly serialized file's locations</returns>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.ForceMoveRenamedArchetypeFolder(System.String,Overworld.Data.IPortableArchetype)">
            <summary>
            Move an archetype from it's old name to a new folder with it's new name (within the same package)
            WARNING This overwrites any existing archetypes with the same name. Use try if you don't want to do this.
            </summary>
        </member>
        <member name="M:Overworld.Data.IArchetypePorter.TryToMoveRenamedArchetypeFolder(System.String,Overworld.Data.IPortableArchetype)">
            <summary>
            Move an archetype from it's old name to a new folder with it's new name (within the same package)
            This returns false if the file exists already, meaning there's already an archetype with the given key.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.CannotBeNegative">
            <summary>
            Denotes a field that should not be negative.
            Overriden by range slider attribute.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.MaximumValueAttribute">
            <summary>
            Denotes a numeric field restricted to a minimum value.
            Overriden by range slider attribute.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.MinimumValueAttribute">
            <summary>
            Denotes a numeric field restricted to a minimum value.
            Overriden by range slider attribute.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.RangeSliderAttribute">
            <summary>
            Denotes a numeric field that should appear as a range slider in the UI
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.RestrictToRangeAttribute">
            <summary>
            Denotes a numeric field restricted to a range of values.
            Overriden by range slider attribute.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.SelectableAttribute">
            <summary>
            Used to indicate a field where you can select one of a set of options.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.TooltipAttribute">
            <summary>
            Adds a tooltip to the field.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.SimpleButtonAttribute">
            <summary>
            Denotes a method that should be auto rendered as a button.
            A valid method takes either no parameters, or a UxSimpleButton(the one clicked on) and a UXPannel as parameters.
            TODO: impliment
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.ValidationAttribute">
            <summary>
            Denotes how the field should be validated.
            You can name a method that takes one argument and returns a bool,
            or for numbers you can provide (int min, int max) as a tuple.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.EnableIfAttribute">
            <summary>
            Denotes another field that indicates when this field should be enabled.
            The other field must have a boolean type and be a property of field.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.IUxViewElement">
            <summary>
            An element of a Simple Ux View.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.IUxViewElement.Copy">
            <summary>
            Make a copy of the element and it's state.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxColumn">
            <summary>
            A column in a simple Ux.
            A pannel can have up to 3 columns, but 3 is the reccomended.
            Columns can have labels at the top.
            Columns cannot contain other columns, but Columns can contain rows.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxColumn.Title">
            <summary>
            The label for this row.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxColumn.GetEnumerator">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxColumn.System#Collections#IEnumerable#GetEnumerator">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxColumn.Copy">
            <summary>
            Copy this column and it's contents
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxColumn.Overworld#Ux#Simple#IUxViewElement#Copy">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxDataField">
            <summary>
            A data field for input or display in a simple ux pannel/view
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxDataField.DisplayType">
            <summary>
            The type of displays available for simple ux data types.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxDataField.Type">
            <summary>
            The type of display this field should use.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxDataField.Validation">
            <summary>
            Used differently for different kinds of fields.
            Can also be replaced with a Func[Value: obj] to override default behaviours
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxDataField.Value">
            <summary>
            The current value of the field.
            Also will be the default initial value.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxDataField.IsReadOnly">
            <summary>
            If this field is readonly
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxDataField.Name">
            <summary>
            The name of the field.
            Used as a default data key
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxDataField.DataKey">
            <summary>
            Data key for the field.
            Used to access it from the editor component display data.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxDataField.Tooltip">
            <summary>
            Info tooltip for the field
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxDataField.Enable">
            <summary>
            Used to determine if the field should be enabled.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxDataField.#ctor(Overworld.Ux.Simple.UxDataField.DisplayType,System.String,System.String,System.Object,System.String,System.Boolean,System.Func{Overworld.Ux.Simple.UxDataField,Overworld.Ux.Simple.UxPannel,System.Boolean},System.Object)">
            <summary>
            Make a new data field for a Simple Ux.
            </summary>
            <param name="type">the DisplayType to use for this field</param>
            <param name="name">the field name. should be unique unless you change the data key</param>
            <param name="tooltip">a breif description of the field, will appear on mouse hover in the ui</param>
            <param name="value">default/current value of the field</param>
            <param name="dataKey">Used to get the value of this field from the view</param>
            <param name="isReadOnly">Some read only fields may be formatted differently (like Text). try passing '() => false' to enable if you want a blured out input field instead.</param>
            <param name="enable">A function to determine if this field should be enabled currently or not. Parameters are this field, and the parent pannel.</param>
            <param name="validation">USed differently for different fields to validate data. Can be overriden with a null, or a Func(object Value)</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Overworld.Ux.Simple.UxDataField.TryToSetValue(System.Object,System.String@)" -->
        <member name="M:Overworld.Ux.Simple.UxDataField.Copy">
            <summary>
            Memberwise clone to copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Overworld.Ux.Simple.UxDataField.Overworld#Ux#Simple#IUxViewElement#Copy">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxDataSet">
            <summary>
            Represents a key value set in a ui
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxDataSet.DataType">
            <summary>
            The type of data this set holds.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxDataSet.#ctor(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Attribute},System.String,System.Collections.ArrayList,System.String,System.Boolean,System.Func{Overworld.Ux.Simple.UxDataField,Overworld.Ux.Simple.UxPannel,System.Boolean},System.Func{System.Int32,System.Object,System.Boolean})">
            <summary>
            Make a key value set to display in a ux.
            </summary>
            <param name="dataType">The type of data the list will accept</param>
            <param name="childFieldAttributes">Add attributes to each generated child input</param>
            <param name="rowValues">The default/current list values</param>
        </member>
        <member name="M:Overworld.Ux.Simple.UxDataSet._update(System.Collections.Generic.KeyValuePair{System.Int32,System.Object})">
            <summary>
            Used to update the colletction
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxDataSet._removeLast">
            <summary>
            remove the last item from the collection
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxDataSet._remove(System.Int32)">
            <summary>
            remove the item at the collection index
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxKeyValueSet">
            <summary>
            Represents a key value set in a ui
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxKeyValueSet.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.String,System.Boolean,System.Func{Overworld.Ux.Simple.UxDataField,Overworld.Ux.Simple.UxPannel,System.Boolean},System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean})">
            <summary>
            Make a key value set to display in a ux.
            </summary>
            <param name="extraEntryValidation">Add validation other than the built in key validation</param>
            <param name="childFieldAttributes">Add attributes to each generated child input</param>
        </member>
        <member name="M:Overworld.Ux.Simple.UxKeyValueSet._update(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Used to update the colletction
            </summary>
            <param name="pair"></param>
        </member>
        <member name="M:Overworld.Ux.Simple.UxKeyValueSet._removeLast">
            <summary>
            remove the last item from the collection
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxKeyValueSet._remove(System.String)">
            <summary>
            remove the item at the collection index
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxPannel">
            <summary>
            Display data for a component.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxPannel.Elements">
            <summary>
            The fiels in this model, by key.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxPannel.Copy">
            <summary>
            Copy this pannels UI scheme.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Overworld.Ux.Simple.UxPannel.Overworld#Ux#Simple#IUxViewElement#Copy">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxPannel.TabData">
            <summary>
            A tab used to switch between pannels of a simple ux.
            </summary>
        </member>
        <member name="F:Overworld.Ux.Simple.UxPannel.TabData.Key">
            <summary>
            Tab optional key, name is used by default
            </summary>
        </member>
        <member name="F:Overworld.Ux.Simple.UxPannel.TabData.Name">
            <summary>
            Tab display name
            </summary>
        </member>
        <member name="F:Overworld.Ux.Simple.UxPannel.TabData.ImageLocationWithinModPackageFolder">
            <summary>
            If you want an icon, an can be placed in your mod package containing this Ux Pannel, and the url after mods/$PackageName$/ should go here.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxPannel.TabData.#ctor(System.String,System.String,System.String)">
            <summary>
            Make a new set of tab data
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <param name="imageLocationWithinModPackageFolder"></param>
        </member>
        <member name="T:Overworld.Ux.Simple.UxRow">
            <summary>
            A Row of UX items.
            Can't contain columns or other rows.
            Can have a label.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxRow.Label">
            <summary>
            The label for this row.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxRow.LabelTooltip">
            <summary>
            Info tooltip for the row label
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxRow.GetEnumerator">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxRow.System#Collections#IEnumerable#GetEnumerator">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxRow.Copy">
            <summary>
            Copy this row and it's contents
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxRow.Overworld#Ux#Simple#IUxViewElement#Copy">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxSimpleButton">
            <summary>
            Represents a simple button in a ui
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxSimpleButton.#ctor(System.String,Overworld.Data.Executeable,System.String,System.String,System.Boolean,System.Func{Overworld.Ux.Simple.UxDataField,Overworld.Ux.Simple.UxPannel,System.Boolean})">
            <summary>
            Make a clickable UI button that does something on click.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxSimpleButton.Click">
            <summary>
            Used to update the colletction
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxTitle">
            <summary>
            A title that takes up it's own row, or can be added to a row or column to prefix it.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxTitle.FontSize">
            <summary>
            Title Size
            </summary>
        </member>
        <member name="F:Overworld.Ux.Simple.UxTitle.Text">
            <summary>
            The tile text
            </summary>
        </member>
        <member name="F:Overworld.Ux.Simple.UxTitle.Tooltip">
            <summary>
            The tile tooltip
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxTitle.Size">
            <summary>
            The title size
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxTitle.#ctor(System.String,System.String,Overworld.Ux.Simple.UxTitle.FontSize)">
            <summary>
            Make a title for a UX.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxTitle.Copy">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxView">
            <summary>
            A simple ux view, with controls, and potentially with multiple pannels that contain content.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxView.Context">
            <summary>
            Extra context you can provide to the component.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxView.MainTitle">
            <summary>
            The main title of this view.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxView.HasMultiplePannels">
            <summary>
            If this view has more than one pannel.
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxView.NumberOfTabs">
            <summary>
            The number of tabs/pannels
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxView.GetPannel(Overworld.Ux.Simple.UxPannel.TabData)">
            <summary>
            Get the pannel at the given tab
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxView.GetPannel(System.String,Overworld.Ux.Simple.UxPannel.TabData@)">
            <summary>
            Get the pannel at the given tab
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxView.GetPannel(System.Int32,Overworld.Ux.Simple.UxPannel.TabData@)">
            <summary>
            Get the pannel at the given tab
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxView.GetPannel(System.Int32)">
            <summary>
            Get the pannel at the given tab
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxView.Copy">
            <summary>
            Copy this view layout and current values.
            </summary>
        </member>
        <member name="T:Overworld.Ux.Simple.UxViewBuilder">
            <summary>
            Used to build the simple Ux
            </summary>
        </member>
        <member name="P:Overworld.Ux.Simple.UxViewBuilder.CurrentPannelTab">
            <summary>
            The current panel tab this builder is working on
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.#ctor(System.String)">
            <summary>
            Make a new simple Overworld Ux builder.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.BuildDefaultField(System.Reflection.FieldInfo)">
            <summary>
            Build a default field using the field
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.BuildDefaultField(System.Reflection.PropertyInfo)">
            <summary>
            Build a default field using the property
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.Copy">
            <summary>
            Copy this builder.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.Clear(System.String)">
            <summary>
            reset and empty this builder
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.AddField(Overworld.Ux.Simple.UxDataField)">
            <summary>
            Add a data field.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.AddRow(Overworld.Ux.Simple.UxDataField[])">
            <summary>
            Add a formatted row of controls, inputs, or Ux items.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.AddRow(Overworld.Ux.Simple.UxTitle,Overworld.Ux.Simple.UxDataField[])">
            <summary>
            Add a formatted row of controls, inputs, or Ux items. Give it a label to the left:
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.AddRow(System.Collections.Generic.IEnumerable{Overworld.Ux.Simple.UxDataField},Overworld.Ux.Simple.UxTitle)">
            <summary>
            Add a formatted row of controls, inputs, or Ux items.
            You can also give it a label to the left:
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.AddColumn(Overworld.Ux.Simple.IUxViewElement[])">
            <summary>
            Add a formatted column of controls, inputs, or Ux items.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.AddColumn(Overworld.Ux.Simple.UxTitle,Overworld.Ux.Simple.IUxViewElement[])">
            <summary>
            Add a formatted column of controls, inputs, or Ux items. Give it a label to the left:
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.AddColumn(System.Collections.Generic.IEnumerable{Overworld.Ux.Simple.IUxViewElement},Overworld.Ux.Simple.UxTitle)">
            <summary>
            Add a formatted column of controls, inputs, or Ux items.
            You can also give it a label to the left:
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.StartNewPannel(Overworld.Ux.Simple.UxPannel.TabData)">
            <summary>
            Starts a new pannel with the given name.
            If this isn't called first, everuthing before is put in a default pannel has the main tilte's name.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder.Build">
            <summary>
            Build and return the view.
            </summary>
        </member>
        <member name="M:Overworld.Ux.Simple.UxViewBuilder._addElementToCurrentPannel(Overworld.Ux.Simple.IUxViewElement)">
            <summary>
            Add an element like a pre-built column or row or field to the current pannel.
            </summary>
        </member>
        <member name="T:BasicHeightMapTile">
            <summary>
            Used to make height map tiles.
            </summary>
        </member>
        <member name="P:BasicHeightMapTile.Types">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:BasicHeightMapTile.TypesByHeight">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:BasicHeightMapTile.UseDefaultBackgroundAsInWorldTileImage">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:BasicHeightMapTile.LinkArchetypeToTileDataOnSet">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:BasicHeightMapTile.#ctor(System.Single,UnityEngine.Tilemaps.Tile)">
            <summary>
            Make a base height tile for a new height value.
            This will throw if you try to create type for a height that already has a type.
            </summary>
        </member>
        <member name="T:DelegateCollection`1">
            <summary>
            An ordered collection of delegates
            </summary>
            <typeparam name="TAction"></typeparam>
        </member>
        <member name="M:DictionaryExtensions.AddToValueCollection``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.ICollection{``1}},``0,``1)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:DictionaryExtensions.ValueCollectionContains``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.ICollection{``1}},``0,``1)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:DictionaryExtensions.AddToHashSet``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:DictionaryExtensions.RemoveFromValueCollection``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.ICollection{``1}},``0,``1)">
            <summary>
            Remove an item from an ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="T:TagedCollection`2">
            <summary>
            A collection of Values indexed by multiple non-unique tags
            </summary>
            <typeparam name="TTag">Assumed to have a unique hash code</typeparam>
            <typeparam name="TValue">The stored values</typeparam>
        </member>
        <member name="P:TagedCollection`2.Values">
            <summary>
            All distinct values
            </summary>
        </member>
        <member name="P:TagedCollection`2.Tags">
            <summary>
            All distinct tags
            </summary>
        </member>
        <member name="M:TagedCollection`2.Add(`1,`0[])">
            <summary>
            Add a new value with as many tags as you want
            </summary>
        </member>
        <member name="M:TagedCollection`2.Add(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            Add a new value with multiple tags
            </summary>
        </member>
        <member name="M:TagedCollection`2.Remove(`1)">
            <summary>
            Remove a value
            </summary>
        </member>
        <member name="M:TagedCollection`2.RemoveValuesFor(`0)">
            <summary>
            Remove all values for the given tag
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindWeightedMatches(System.Int32,`0[])">
            <summary>
            Find the best matches, taking into account tag order
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindWeightedMatches(`0[])">
            <summary>
            Find the best matches, taking into account tag order with the default weight multiplier
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindWeightedMatches(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Find the best matches, taking into account tag order with the default weight multiplier
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindWeightedMatches(System.ValueTuple{`0,System.Int32}[])">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindWeightedMatches(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindBestMatches(`0[])">
            <summary>
            Find the values that match the most tags in order
            </summary>
        </member>
        <member name="M:TagedCollection`2.FindBestMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the values that match the most tags in order
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectMatches(`0[])">
            <summary>
            Find the values that match any of the tags, unordered
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the values that match any of the tags, unordered
            </summary>
        </member>
        <member name="M:TagedCollection`2.FirstWithTagsOrDefault(`0[])">
            <summary>
            Find the first value with the tags, or a default one with the best match
            </summary>
        </member>
        <member name="M:TagedCollection`2.FirstWithTagsOrDefault(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the first value with the tags, or a default one with the best match
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectWeightedMatches(System.Int32,`0[])">
            <summary>
            Select the best matches, taking into account tag order
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectWeightedMatches(`0[])">
            <summary>
            Select the best matches, taking into account tag order with the default weight multiplier
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectWeightedMatches(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Select the best matches, taking into account tag order with the default weight multiplier.
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectWeightedMatches(System.ValueTuple{`0,System.Int32}[])">
            <summary>
            Select matches given tags with specified weights
            The higher the weight, the more wanted the tag
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectWeightedMatches(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary>
            Select matches given tags with specified weights
            The higher the weight, the more wanted the tag
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectBestMatches(`0[])">
            <summary>
            Select the values that match the most tags in order
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.SelectBestMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Select the values that match the most tags in order
            Slower than Find due to the cast
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(System.Int32,`0[])">
            <summary>
            Find the best matches, taking into account tag order
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(`0[])">
            <summary>
            Find the best matches, taking into account tag order with the default weight multiplier
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the best matches, taking into account tag order with the default weight multiplier
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Find the best matches, taking into account tag order with the default weight multiplier
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(System.ValueTuple{`0,System.Int32}[])">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByBestMatch(`0[])">
            <summary>
            Find the values that match the most tags
            </summary>
        </member>
        <member name="M:TagedCollection`2.GetAllSortedByBestMatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the values that match the most tags
            </summary>
        </member>
    </members>
</doc>
